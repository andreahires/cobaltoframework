package com.cobalto.utils{		import flash.display.*;	import flash.events.*;	import flash.net.URLRequest;	import flash.system.LoaderContext;
		public class Preloader extends Sprite	{				protected var _loader:Loader;				private var _isComplete:Boolean;		private var _loaderInfo:LoaderInfo;		private var _content:DisplayObject;		private var _bytesLoaded:int;		private var _bytesTotal:int;		private var _percent:int;				public static const START:String = "start";		public static const PROGRESS:String = "progress";		public static const COMPLETE:String = "complete";		public static const INIT:String = "init";		public static const IO_ERROR:String = "ioError";				public function Preloader()		{						super();				}				private function configureListeners(value:Boolean):void		{						if(value)			{								_loaderInfo.addEventListener(Event.COMPLETE,completeHandler);				_loaderInfo.addEventListener(Event.INIT,initHandler);				_loaderInfo.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);				_loaderInfo.addEventListener(Event.OPEN,openHandler);				_loaderInfo.addEventListener(ProgressEvent.PROGRESS,progressHandler);							}			else			{								_loaderInfo.removeEventListener(Event.COMPLETE,completeHandler);				_loaderInfo.removeEventListener(Event.INIT,initHandler);				_loaderInfo.removeEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);				_loaderInfo.removeEventListener(Event.OPEN,openHandler);				_loaderInfo.removeEventListener(ProgressEvent.PROGRESS,progressHandler);							}		}				private function completeHandler(e:Event):void		{						dispatchEvent(new Event(COMPLETE,true));				}				private function initHandler(e:Event):void		{						_isComplete = true;			_content = e.target.content;			dispatchEvent(new Event(INIT,true));				}				private function ioErrorHandler(e:IOErrorEvent):void		{						trace("PRELOADER ERROR: " + e);			dispatchEvent(new Event(IO_ERROR,true));				}				private function openHandler(e:Event):void		{						dispatchEvent(new Event(START,true));				}				private function progressHandler(event:ProgressEvent):void		{						_bytesLoaded = event.bytesLoaded;			_bytesTotal = event.bytesTotal;			_percent = Math.round(_bytesLoaded * 100 / _bytesTotal);						dispatchEvent(new Event(PROGRESS,true));				}				public function unloadLoader():void		{						configureListeners(false);						if(!_isComplete)				_loader.unload();						try			{								if(!_isComplete)					_loader.close();				_loader = null;				_loaderInfo = null;				_isComplete = false;				_content = null;				_bytesLoaded = 0;				_bytesTotal = 0;				_percent = 0;							}			catch(e:*)			{								trace('PRELOADER ERROR: ' + e);							}				}				public function destroy():void		{						if(_isComplete)			{				var li:LoaderInfo = _loader.contentLoaderInfo;								if(li.childAllowsParent && li.content is Bitmap)				{										(li.content as Bitmap).bitmapData.dispose();									}			}						unloadLoader();				}				public function get ldrInfo():LoaderInfo		{						return _loaderInfo;				}				public function get bt():int		{						return _bytesTotal;				}				public function get bl():int		{						return _bytesLoaded;				}				public function get percent():int		{						return _percent;				}				public function get loader():Loader		{						return _loader;				}				public function get content():DisplayObject		{						return _content;				}				public function startLoader(url:String=null):void		{						if(url == null)			{								trace('PRELOADER ERROR: Url String is null');				return;							}						_loader = new Loader();			_loader.mouseEnabled = false;			addChild(_loader);						_loaderInfo = _loader.contentLoaderInfo;						configureListeners(true);						var context:LoaderContext = new LoaderContext();			context.checkPolicyFile = true;						var request:URLRequest = new URLRequest(url);			_loader.load(request,context);				}		}}
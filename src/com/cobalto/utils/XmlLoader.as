package com.cobalto.utils{		import flash.events.*;	import flash.net.*;	import com.cobalto.events.CustomEvent;		public class XmlLoader extends EventDispatcher	{				public static const XML_AVAILABLE:String='xmlAvailable';		public static const PROGRESS:String='xmlProgress';		private var _textData:String;		private var _urlLoader:URLLoader;		private var _urlRequest:URLRequest;				public function XmlLoader(pDataUrl:String)		{						super();						setURLLoader();			setURLRequest(pDataUrl)			activateListeners();			loadData();					}				private function setURLLoader():void		{						_urlLoader=new URLLoader();			_urlLoader.dataFormat=URLLoaderDataFormat.TEXT;					}				private function setURLRequest(pDataUrl:String):void		{						_urlRequest=new URLRequest(pDataUrl);					}				private function activateListeners():void		{			_urlLoader.addEventListener(ProgressEvent.PROGRESS, progressHandler);			_urlLoader.addEventListener(Event.COMPLETE,onComplete);			_urlLoader.addEventListener(IOErrorEvent.IO_ERROR,onIoError);					}				private function removeListeners():void		{						_urlLoader.removeEventListener(Event.COMPLETE,onComplete);			_urlLoader.removeEventListener(IOErrorEvent.IO_ERROR,onIoError);					}				private function loadData():void		{						_urlLoader.load(_urlRequest);					}				private function progressHandler(e:ProgressEvent):void		{			var percent:Number = e.bytesLoaded * 100 / e.bytesTotal;						dispatchEvent(new CustomEvent(PROGRESS, {percent:percent}, true));					}				private function onComplete(e:Event):void		{						removeListeners();			_textData=_urlLoader.data.split('ß').join('&#223;');						/*			trace(e.bubbles)			trace(e.cancelable)			trace(e.currentTarget)			trace(e.target)			*/						dispatchEvent(new Event(XML_AVAILABLE));		}				private function onIoError(e:Event):void		{						trace('XMLLoader Error: Caricamento fallito.');					}				public function get textData():String		{						return(_textData);					}	}}
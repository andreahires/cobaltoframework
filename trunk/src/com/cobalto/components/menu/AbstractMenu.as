package com.cobalto.components.menu {	import com.cobalto.api.IMenu;		import flash.display.DisplayObject;	import flash.display.Sprite;	import com.cobalto.components.buttons.PrimitiveButton;
		public class AbstractMenu extends Sprite implements IMenu	{				//** an array that contains the references to the menu buttons		protected var _itemArray:Array = new Array();			//** the id of the menu itself		protected var _menuId:int;				//** the selected button of the menu, should match the one of the basic menu added by composition		protected var _activeId:uint;					//** constructor		public function AbstractMenu():void		{			super();		}		//** the init function to build the menu		// * @param itemTotal: the number of the buttons to create		public function build(itemTotal:uint):void{}		//TODO: allow to add a button to the menu		public function addItem(item:PrimitiveButton = null):void{}		//** set a orizzontal or vertical fixed offset between the buttons		public function setOffset(xOffset:Number = 0, yOffset:Number = 0):void{}				//** this function could be useful to select the button at the given id and deactivate the others		public function update(id:uint):void{}				//** enable all the buttons of the menu except the selected button		public function enableMenu():void{}				//** disable all the buttons		public function disableMenu():void{}				//** return the buttons array		public function get itemArray():Array		{			return _itemArray;		}				//** useful to set the button array - I don't think it's very useful		public function set itemArray(array:Array):void		{			_itemArray = array;					}				//** return the length of the menu		public function get numItems():uint		{			return _itemArray.length;		}				//** return the selected button id		public function get activeId():uint		{			return _activeId; 		}				//** get the menu id		public function get id():int		{			return _menuId; 		}				//** set the menu id		public function set id(index:int):void		{			_menuId = index;								}				//** common function to all the IViewComponent Classes useful to reorganize the items positions based on stage resize		public function organizeItems():void{};				// ** transition out of the menu		public function transitionOut():void{};				// ** transition in of the menu		public function transitionIn():void{};				// ** return the menu as a displayObject		public function get displayObject():DisplayObject		{			return this;		}			}}
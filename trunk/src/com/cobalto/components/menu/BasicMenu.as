package com.cobalto.components.menu{	import com.cobalto.components.buttons.PrimitiveButton;
	
	import flash.events.Event;
		public class BasicMenu extends AbstractMenu	{				public static const BUTTON_ADDED:String = "ButtonAdded";		public static const BUTTON_ENABLED:String = "ButtonEnabled";		public static const BUTTON_DISABLED:String = "ButtonDisabled";				//*** contructor		public function BasicMenu():void		{			super();		}				//** the init function to build the menu		// * @param itemTotal: the number of the buttons to create		override public function build(numItems:uint):void		{			var itemNum:uint = numItems;						// *** loop to create the requested number of buttons			for(var i:int = 0;i < itemNum;i++)			{				//** create PrimitiveButtons				var bt:PrimitiveButton = new PrimitiveButton();				//** assign a progressive id for each button				bt.id = i;								// add to the display list the button				addChild(bt);								// ** push the button inside an object and into the items array				_itemArray.push({mc:bt});			}			//** when the menu is added to stage dispatch the added event for each button			// *** this is required for event bubbling			addEventListener(Event.ADDED_TO_STAGE,dispatchButtonEvents);			addEventListener(Event.REMOVED_FROM_STAGE,destroy);		}				protected function dispatchButtonEvents(e:Event=null):void		{			removeEventListener(Event.ADDED_TO_STAGE,dispatchButtonEvents);			var itemNum:uint = numItems;						// *** dispatch the event to configure the buttons properties			for(var i:int = 0;i < itemNum;i++)			{				var bt:PrimitiveButton = getChildAt(i) as PrimitiveButton;				bt.dispatchEvent(new Event(BUTTON_ADDED,true));			}				}				// ** function to add a new button to the menu				override public function addItem(item:PrimitiveButton=null):void		{			var bt:PrimitiveButton = new PrimitiveButton();			bt.id = numItems;			addChild(bt);			_itemArray.push({mc:bt});						//** TODO - test the added event functionaly			bt.dispatchEvent(new Event(BUTTON_ADDED,true));		}				public function addItemAt(arrayID:int = 0):void		{			var bt:PrimitiveButton = new PrimitiveButton();			bt.id = numItems;			addChild(bt);			_itemArray.splice(arrayID,0,{mc:bt});						//** TODO - test the added event functionaly			bt.dispatchEvent(new Event(BUTTON_ADDED,true));		}				//** set a orizzontal or vertical fixed offset between the buttons		override public function setOffset(xOffset:Number=0,yOffset:Number=0):void		{			var itemNum:uint = numItems;						for(var i:int = 0;i < itemNum;i++)			{				var bt:PrimitiveButton = _itemArray[i].mc;				bt.x = xOffset * i;				bt.y = yOffset * i;			}		}				//**  useful to select the button at the given id and deactivate the others		//** it affect just the mouseEnabled properties, NOT the skin of the button		override public function update(id:uint):void		{			// *** set the active id			_activeId = id;						var itemNum:uint = numItems;						for(var i:int = 0;i < itemNum;i++)			{				var bt:PrimitiveButton = _itemArray[i].mc;								if(i != id)				{					bt.enable = true;					bt.dispatchEvent(new Event(BUTTON_ENABLED,true));				}				else				{										bt.enable = false;					bt.dispatchEvent(new Event(BUTTON_DISABLED,true));				}			}				}				//** enable all the buttons of the menu except the selected button and dispatch the events		override public function enableMenu():void		{			var itemNum:uint = numItems;						for(var i:int = 0;i < itemNum;i++)			{				var bt:PrimitiveButton = _itemArray[i].mc as PrimitiveButton;				bt.enable = true;				bt.dispatchEvent(new Event(BUTTON_ENABLED,true));			}		}				//** disable all the buttons and dispatch the event		override public function disableMenu():void		{			var itemNum:uint = numItems;						for(var i:int = 0;i < itemNum;i++)			{				var bt:PrimitiveButton = _itemArray[i].mc as PrimitiveButton;				bt.enable = false;				bt.dispatchEvent(new Event(BUTTON_DISABLED,true));			}		}				public function destroy(e:Event=null):void		{			if(!_itemArray) return;			var ln:uint = _itemArray.length;						for(var i:uint = 0;i < ln;i++)			{				if(_itemArray[i].mc)				{					if(_itemArray[i].mc.parent)					{						removeChild(_itemArray[i].mc);						_itemArray[i].mc = null;						_itemArray[i] = null;					}				}			}						_itemArray = null;		}		}}